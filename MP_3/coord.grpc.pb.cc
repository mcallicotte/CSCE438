// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coord.proto

#include "coord.pb.h"
#include "coord.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace oc {

static const char* CoordService_method_names[] = {
  "/oc.CoordService/Login",
  "/oc.CoordService/ServerCommunicate",
};

std::unique_ptr< CoordService::Stub> CoordService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CoordService::Stub> stub(new CoordService::Stub(channel, options));
  return stub;
}

CoordService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Login_(CoordService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerCommunicate_(CoordService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status CoordService::Stub::Login(::grpc::ClientContext* context, const ::oc::Request& request, ::oc::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::oc::Request, ::oc::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void CoordService::Stub::async::Login(::grpc::ClientContext* context, const ::oc::Request* request, ::oc::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::oc::Request, ::oc::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void CoordService::Stub::async::Login(::grpc::ClientContext* context, const ::oc::Request* request, ::oc::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::oc::Reply>* CoordService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::oc::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::oc::Reply, ::oc::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::oc::Reply>* CoordService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::oc::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::oc::HeartBeat, ::oc::HeartBeat>* CoordService::Stub::ServerCommunicateRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::oc::HeartBeat, ::oc::HeartBeat>::Create(channel_.get(), rpcmethod_ServerCommunicate_, context);
}

void CoordService::Stub::async::ServerCommunicate(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::oc::HeartBeat,::oc::HeartBeat>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::oc::HeartBeat,::oc::HeartBeat>::Create(stub_->channel_.get(), stub_->rpcmethod_ServerCommunicate_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::oc::HeartBeat, ::oc::HeartBeat>* CoordService::Stub::AsyncServerCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::oc::HeartBeat, ::oc::HeartBeat>::Create(channel_.get(), cq, rpcmethod_ServerCommunicate_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::oc::HeartBeat, ::oc::HeartBeat>* CoordService::Stub::PrepareAsyncServerCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::oc::HeartBeat, ::oc::HeartBeat>::Create(channel_.get(), cq, rpcmethod_ServerCommunicate_, context, false, nullptr);
}

CoordService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordService::Service, ::oc::Request, ::oc::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CoordService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::oc::Request* req,
             ::oc::Reply* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< CoordService::Service, ::oc::HeartBeat, ::oc::HeartBeat>(
          [](CoordService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::oc::HeartBeat,
             ::oc::HeartBeat>* stream) {
               return service->ServerCommunicate(ctx, stream);
             }, this)));
}

CoordService::Service::~Service() {
}

::grpc::Status CoordService::Service::Login(::grpc::ServerContext* context, const ::oc::Request* request, ::oc::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordService::Service::ServerCommunicate(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::oc::HeartBeat, ::oc::HeartBeat>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace oc

